import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import sklearn
import statsmodels

data = pd.read_csv('C:/Users/maryn/Downloads/fifa23_players.csv')
data.head()

data.shape

data.describe()

def EDA(data):
    total_na = data.isna().sum().sum()
    print("Dimensions : %d rows, %d columns" % (data.shape[0], data.shape[1]))
    print("Total NA Values : %d " % (total_na))
    print("%38s %10s     %10s %10s" % ("Column Name", "Data Type", "Count Distinct", "NA Values"))
    col_name = data.columns
    dtypes = data.dtypes
    uniq = data.nunique()
    na_val = data.isna().sum()
    for i in range(len(data.columns)):
        print("%38s %10s   %10s %10s" % (col_name[i], dtypes[i], uniq[i], na_val[i]))

EDA(data)

data = data[['short_name', 'player_positions', 'overall', 'value_eur', 'wage_eur', 'age', 'club_name', 'club_jersey_number', 'nationality_name', 'skill_moves', 'work_rate', 'player_tags', 'pace', 'shooting', 'passing', 'dribbling', 'defending', 'physic', 'attacking_crossing', 'attacking_finishing', 'attacking_heading_accuracy', 'attacking_short_passing', 'attacking_volleys', 'skill_dribbling', 'skill_curve', 'skill_fk_accuracy', 'skill_long_passing', 'skill_ball_control', 'movement_acceleration', 'movement_sprint_speed', 'movement_agility', 'movement_reactions', 'movement_balance', 'power_shot_power', 'power_jumping', 'power_stamina', 'power_strength', 'power_long_shots', 'mentality_aggression', 'mentality_interceptions',  'mentality_positioning', 'mentality_vision', 'mentality_penalties', 'mentality_composure', 'defending_marking_awareness', 'defending_standing_tackle', 'defending_sliding_tackle', 'goalkeeping_diving', 'goalkeeping_handling', 'goalkeeping_kicking', 'goalkeeping_positioning', 'goalkeeping_reflexes', 'goalkeeping_speed']]

data.head(10)

data.describe()

data.nlargest(100,"overall")

data.nlargest(100,"wage_eur")

list(data.groupby('club_name')['overall'].nlargest(30).index)

list(data.groupby('club_name')['movement_sprint_speed'].nlargest(30).index)

list(data.groupby('club_name')['skill_dribbling'].nlargest(30).index)

plt.scatter(data['age'], data['player_positions'])
plt.xlabel('age')
plt.ylabel('player_positions')

plt.scatter(data['overall'], data['player_positions'])
plt.xlabel('overall')
plt.ylabel('player_positions')

plt.scatter(data['overall'], data['nationality_name'])
plt.xlabel('overall')
plt.ylabel('nationality_name')

#11 (a metric for penaltist: each of values should be multiplied by weight, sum of weights must give 1)
# a (success penalty possibility) = (0.3*Accuracy + 0.3*Power of kick + 0.05*Psychological factor + 0.2*Length and speed of the run-up + 0.15*Angle of the shot) / (Often goalkeepwr position * time frame for panlty)

#12 (a metric for goalkeeper)
# b (sucsess goalkeeper) = (Percentage of saved penatlies + 0.25*Reading skill of penaltist + 0.15*Reflexes + 0.6*Penalty Skills)

data1 = data[['short_name', 'player_positions', 'overall', 'value_eur', 'wage_eur', 'age', 'club_name', 'club_jersey_number', 'nationality_name', 'skill_moves', 'work_rate', 'player_tags', 'pace', 'shooting', 'passing', 'dribbling', 'defending', 'physic']]

data1.head(10)

data1.describe()

data2 = data[['attacking_crossing', 'attacking_finishing', 'attacking_heading_accuracy', 'attacking_short_passing', 'attacking_volleys', 'skill_dribbling', 'skill_curve', 'skill_fk_accuracy', 'skill_long_passing', 'skill_ball_control', 'movement_acceleration', 'movement_sprint_speed', 'movement_agility', 'movement_reactions', 'movement_balance', 'power_shot_power', 'power_jumping', 'power_stamina', 'power_strength', 'power_long_shots', 'mentality_aggression', 'mentality_interceptions',  'mentality_positioning', 'mentality_vision', 'mentality_penalties', 'mentality_composure']]

data2.head(10)

data2.describe()

data3 = data[['defending_marking_awareness', 'defending_standing_tackle', 'defending_sliding_tackle', 'goalkeeping_diving', 'goalkeeping_handling', 'goalkeeping_kicking', 'goalkeeping_positioning', 'goalkeeping_reflexes', 'goalkeeping_speed']]

data3.head(10)

data3.describe()

# 16 ____що можна дослідити з точки зору бізнесу: 
# Потенційні рейтинги гравців для виявлення талантів (зростання рейтингу гравців з часом).
# Аналіз ринку гравців (ринкова вартість гравців, тенденції на трансферному ринку).
# Потенціал клубу для виховання нападників/захисників - у часовому проміжку tracing (+/- подібні переходи гравців з одного клубу у інший допоможе вирахувати trend (a) у роках між переходами з клубу у клуб (б) у повторі клубів)

# 17 ____weird values in dataset: 
# column "age" max value is 54 (too much)
# column "pace" max value is 28 (too low related ti quertile 25 %)
# goalkeeper feature columns could be could have high max values in comparison to 75 % quartile, because there are less goalkeepers in quantity to all amount of players. 
# count amount of items in columns pace, shooting, passing, dribbling, defending, physic is lower (17107). and column goalkeeping_speed (2132).

X = data.drop(columns=['player_positions'])
Y = data['player_positions']

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=20)

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 20, solver='lbfgs', multi_class='auto')
classifier.fit(X_train, Y_train)

data1.corr()

import seaborn as sns

sns.heatmap(data1.corr())

sns.heatmap(data.corr())

